# -*- coding: utf-8 -*-
"""main

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13wjlzFsTvYStjR3hDVzfCzn5Z4Nd4JKp

MarketMaster- Dual-Agent Financial Research Assistant
aimed at eliminating the Hallucinations
"""

!pip install -q langchain langchain-google-genai google-search-results newsapi-python

# Let us import the required libraries

import os
import time
from langchain.agents import AgentType, initialize_agent, Tool
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.utilities import GoogleSerperAPIWrapper
import requests

def get_finance_news(query):
    """Fetch news from NewsAPI"""
    api_key = os.getenv("NEWS_API_KEY")
    if not api_key:
        return "NewsAPI key not configured"

    url = f"https://newsapi.org/v2/everything?q={query}&sortBy=publishedAt&apiKey={api_key}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            articles = response.json().get('articles', [])[:5]
            result = []
            for article in articles:
                result.append(f"Title: {article.get('title', 'N/A')}")
                result.append(f"Description: {article.get('description', 'N/A')}")
                result.append(f"Source: {article.get('source', {}).get('name', 'N/A')}")
                result.append("-" * 40)
            return '\n'.join(result) if result else "No news found"
        else:
            return f"Error fetching news: {response.status_code}"
    except Exception as e:
        return f"Error: {str(e)}"

tool_news = Tool(
    name="finance_news",
    func=get_finance_news,
    description="Find recent financial news articles about companies or topics."
)

!pip install -U langchain-community

# Configuring the API keys

def setup_api_keys():
  """
  Setting up the API key
  Returns true only if all of them are set, otherwise false
  """
  required_keys={
      "GOOGLE_API_KEY": "Google AI (Gemini)",
      "SERPER_API_KEY": "Serper (Google Search)",
      "NEWS_API_KEY": "NewsAPI"

  }
  keys_not_found = []
  for key, service in required_keys.items():
    if not os.getenv(key):
      keys_not_found.append((key,service))


  if not keys_not_found:
    print("All the API keys are correctly configured\n")
    return True

  print("API keys are missing.Please enter them below:\n")

  for key, service in keys_not_found:
    print(f"{service} ({key})")
    value = input(f"Enter your {service} API key: ").strip()
    if value:
      os.environ[key] = value
      print(f"{service} key set!\n")

    else:
      print(f" No key provided for {service}")
      return False

  return True

# Initializing the agents

try:
  llm=ChatGoogleGenerativeAI(
      model="gemini-1.5-flash-latest",
      temperature=0.3,
      google_api_key=os.getenv("GOOGLE_API_KEY")
  )
  print(" Gemini Initialized")
except Exception as e:
  raise Exception(f"Error initializing the LLM: {e}")

# Now lets define the tools

# GoogleSearch
search=GoogleSerperAPIWrapper()
tool_search=Tool(
    name="google_search",
    func=search.run,
    description="Seach Google for real-time market information, insights,stock prices and the company data."

)
print("Google Search Initialized ")

# Now lets Build the agents
"""
We will create two agents one researcher agent that will gather messy/raw data from the internet and the second agent as analyst agent that will analyse the data
given by the researcher agent.This way the only source of information it has will be the 1st agent. So hallucinations will be
significantly reduced.
"""

# Researcher
researcher_agent=initialize_agent(
    tools=[tool_search,tool_news],
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True, # Currently for the development
    handle_parsing_errors=True,
    max_iterations=7,
)
print("Researcher Agent Initialized")

# Analyst
analyst_agent=initialize_agent(
    tools=[], #Only information source in the first agent
    llm=llm,
    agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,
    verbose=True, # Currently for the development
    handle_parsing_errors=True,
)
print(" Analyst Agent initialized")

single_agent = initialize_agent(
    tools=[tool_search, tool_news],
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=False,
    handle_parsing_errors=True,
    max_iterations=7,
)
print("Single Agent Initialised")

print("All the agents are ready to use")

# Now let us build the metrics to compare the performance of a single agent analyst versus double agent anlyst

class Metrics:
  def __init__(self):
    self.results=[]
  def count_facts(self,text):

    #Counting numbers and targerted facts in the response

    import re
    numbers=len(re.findall(r'\d+\.?\d*%?|\$[\d,]+\.?\d*|\b20\d{2}\b', text))
    return numbers

  def count_vague_words(self,text):

    # Counting the words contributing to the hallucination

    uncertain_words=['might', 'could', 'possibly', 'perhaps', 'may', 'likely', 'probably']
    count = sum(word in text.lower() for word in uncertain_words)
    return count

  def analyze_response(self,query,system_type,response,time_taken):
    result={
        'query':query,
        'system':system_type,
        'time':round(time_taken,2),
        'length':len(response),
        'facts': self.count_facts(response),
        'uncertain_words': self.count_vague_words(response)
    }
    self.results.append(result)
    print(f"\nðŸ“Š Quick Metrics:")
    print(f"   Time: {result['time']}s")
    print(f"   Facts/Numbers: {result['facts']}")
    print(f"   Uncertain words: {result['uncertain_words']}")

    return result

    # Now let us show the comparison between the sigle versus the double agent model

  def comparison(self):
    """Showing the comparison"""
    dual = [r for r in self.results if r['system'] == 'dual']
    single = [r for r in self.results if r['system'] == 'single']
    if not dual or not single:
      print("Need results from both systems for comparison!")
      return

    dual_facts = sum(r['facts'] for r in dual) / len(dual)
    single_facts = sum(r['facts'] for r in single) / len(single)

    dual_uncertain = sum(r['uncertain_words'] for r in dual) / len(dual)
    single_uncertain = sum(r['uncertain_words'] for r in single) / len(single)

    dual_time = sum(r['time'] for r in dual) / len(dual)
    single_time = sum(r['time'] for r in single) / len(single)

    print(f"\n Facts & Numbers:")
    print(f"   Dual-Agent:   {dual_facts:.1f}")
    print(f"   Single-Agent: {single_facts:.1f}")

    # More the facts the better is the model

    if dual_facts>single_facts:
      improvement = ((dual_facts - single_facts) / single_facts * 100)
      print(f"   Improvement: +{improvement:.1f}%")

    #Now checking for Uncertainity or Hallucinations
    #Lesser the Hallucinations the better it is

    print(f"\n  Uncertain Language")
    if dual_uncertain<single_uncertain:
      reduction = ((single_uncertain - dual_uncertain) / single_uncertain * 100)
      print(f"   Reduction: -{reduction:.1f}%")

    print(f"\n  Response Time:")
    print(f"   Dual-Agent:   {dual_time:.1f}s")
    print(f"   Single-Agent: {single_time:.1f}s")

    if dual_facts > single_facts and dual_uncertain < single_uncertain:
      print(" Dual-agent shows MORE facts and LESS uncertainty!")
      print(" This proves it reduces hallucinations!")

metrics=Metrics()

def financial_query_analysis_for_dual(query):
  """ Analyzing the financial questions using two Agents"""
  print("\n" + "="*60)
  print(f"Analyzing: {query}")
  print("="*60)
  print("\nStep 1: Getting data from internet...")

  start_time=time.time()

  # Defining the prompt for the research_agents


  try:
    researcher_agent_prompt=f"""
    Search for information about: {query}



    Find:
    - Latest news
    - Stock prices for a company
    - Key facts

    I only want the raw data collected, no analysis needed.
    """
    research_data=researcher_agent.run(researcher_agent_prompt)
    print("The Data has been successfully collected!\n")
    print(research_data)
    print("-"*60)

  except Exception as e:
    print(f"Error: {e}")
    return None

# Using the Analyst agent


  print("\nStep 2: Creating analysis report...")
  try:
    analysis_prompt=f"""

    Give the answer for this question: {query}
    Here is the data:
    {research_data}
    Prepare a report with the following sections:
    -Executive  Summary
    -Key Findings
    -Detailed Analysis
    -Conclusion
    """
    final_report=analyst_agent.run(analysis_prompt)
    end_time=time.time()
    print("\n" + "="*60)
    print("FINAL REPORT")
    print("="*60)
    print(final_report)
    print("="*60)
    metrics.analyze_response(query, 'dual', final_report, end_time - start_time)
    return final_report
  except Exception as e:
    print(f"Error: {e}")
    return None

#Defining the Single Agent Model

def single_agent_analysis(query):
   print("\n" + "="*60)
   print("SINGLE-AGENT SYSTEM")
   print("="*60)
   print(f"Query: {query}\n")
   start_time=time.time()
   try:
    prompt=f"""
    Answer the question: {query}
    Provide a report with:
    - Executive Summary
    - Key Findings
    - Detailed Analysis
    - Conclusion
    """
    report = single_agent.run(prompt)
    end_time=time.time()

    print("\n" + "="*60)
    print("REPORT")
    print("="*60)
    print(report)
    print("="*60)

    metrics.analyze_response(query, 'single', report, end_time - start_time)
    return report
   except Exception as e:
    print(f"Error: {e}")
    return None

#Run a query like this:
#financial_query_analysis("What are the latest developments for NVIDIA?")
# or you can try:
# financial_query_analysis("How is Tesla stock performing?")
# financial_query_analysis("What's happening in the AI chip industry?")

